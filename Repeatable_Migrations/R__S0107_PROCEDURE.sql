--  Update the Value for SOH, SOD, C , Invoice --PROCEDURE-- 

CREATE OR REPLACE PROCEDURE P_INVOICE_GENERATE()
RETURNS String
LANGUAGE SQL
AS
$$
BEGIN

    -- Update ITEM_COUNT in T_SALES_ORDER_HEADER --
    
    UPDATE T_SALES_ORDER_HEADER AS SOH
    SET ITEM_COUNT = (
        SELECT COUNT(SOD.ITEM_ID)
        FROM T_SALES_ORDER_DETAIL AS SOD
        WHERE SOD.ORDER_ID = SOH.ORDER_ID
        AND SOD.CUSTOMER_ID = SOH.CUSTOMER_ID
    );

    -- Update TOTAL_AMOUNT in T_SALES_ORDER_HEADER --
    
    UPDATE T_SALES_ORDER_HEADER AS SOH
    SET TOTAL_AMOUNT = (
        SELECT SUM(SOD.Total_Amount)
        FROM T_SALES_ORDER_DETAIL AS SOD
        WHERE SOD.ORDER_ID = SOH.ORDER_ID
        AND SOD.CUSTOMER_ID = SOH.CUSTOMER_ID
    );

     -- Update Discount in T_SALES_ORDER_HEADER --
     
    UPDATE T_SALES_ORDER_HEADER AS SOH
    SET DISCOUNT = ROUND(SOH.TOTAL_AMOUNT - Calculate_Total_Amount
        (C.CATEGORY, SOH.COUPON_CODE, SOH.TOTAL_AMOUNT), 2)
        FROM T_CUSTOMER AS C
        INNER JOIN T_PROMOTION AS P ON P.CUSTOMER_CATEGORY = C.CATEGORY
        WHERE SOH.COUPON_CODE = P.PROMOTION_TYPE;


    -- Update TOTAL_ORDER in T_CUSTOMER -- 
    
    UPDATE T_CUSTOMER AS C
    SET TOTAL_ORDERS = (
        SELECT COUNT(DISTINCT SOH.ORDER_ID)
        FROM T_SALES_ORDER_HEADER AS SOH
        WHERE C.CUSTOMER_ID = SOH.CUSTOMER_ID
    );

     -- Insert Final Invoice Fields into T_INVOICE --
     
    Insert into T_INVOICE(ORDER_ID, ORDER_DATE, INVOICE_DATE, TAX_AMOUNT, TOTAL_AMOUNT,DISCOUNT,FINAL_INVOICE_AMT,         CUSTOMER_ID, CREATE_DATE, CREATE_USER)
    SELECT Distinct
    SOH.ORDER_ID,
    SOH.ORDER_DATE,
    CURRENT_DATE AS INVOICE_DATE,
    Round((SOH.Total_Amount * 0.09), 2) AS TAX_AMOUNT,
    SOH.TOTAL_AMOUNT,
    SOH.DISCOUNT AS DISCOUNT,
    Round((SOH.TOTAL_AMOUNT - DISCOUNT) + SOH.Total_Amount * 0.09, 2) AS FINAL_INVOICE_AMT,
    C.CUSTOMER_ID,
    CURRENT_DATE AS CREATE_DATE,
    SOH.CREATE_USER 
FROM 
    T_CUSTOMER AS C
INNER JOIN 
    T_PROMOTION AS P ON P.CUSTOMER_CATEGORY = C.CATEGORY 
INNER JOIN 
    T_SALES_ORDER_HEADER AS SOH ON C.CUSTOMER_ID = SOH.CUSTOMER_ID
INNER JOIN 
    T_SALES_ORDER_DETAIL AS SOD ON SOD.ORDER_ID = SOH.ORDER_ID AND SOD.CUSTOMER_ID = SOH.CUSTOMER_ID
ORDER BY SOH.ORDER_ID;


-- Update TOTAL_INVOICE_AMOUNT in T_CUSTOMER -- 

UPDATE T_CUSTOMER AS C
SET TOTAL_INVOICE_AMOUNT = (
    SELECT SUM(INV.final_invoice_amt) 
    FROM T_Invoice AS INV
    WHERE INV.CUSTOMER_ID = C.CUSTOMER_ID
);

-- Update LOYALTY_POINTS in T_CUSTOMER -- 
  
UPDATE T_CUSTOMER
SET LOYALTY_POINTS = 
    CASE 
        WHEN CATEGORY = 'Gold' THEN LOYALTY_POINTS + 100
        WHEN CATEGORY = 'Silver' THEN LOYALTY_POINTS + 50
        WHEN CATEGORY = 'Bronze' THEN LOYALTY_POINTS + 30
        ELSE LOYALTY_POINTS
    END
WHERE TOTAL_INVOICE_AMOUNT > 1000
AND CATEGORY IN ('Gold', 'Silver', 'Bronze');
    
   RETURN 'Item counts, total amounts, Total Orders, T_INVOICE Table updated successfully.';
END;
$$;

CALL P_INVOICE_GENERATE();